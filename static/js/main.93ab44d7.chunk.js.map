{"version":3,"sources":["ToolBar.js","App.js","serviceWorker.js","index.js"],"names":["ToolBar","react_default","a","createElement","es","panelClassName","fixed","colored","defaultTabIndex","centered","tabId","label","size","className","image_gallery_default","showPlayButton","items","srcSet","media","thumbnail","original","Component","App","src","alt","height","width","class","ToolBar_ToolBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAWqBA,4MAoBjB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeC,eAAe,UAAUC,OAAK,EAACC,SAAO,EAACC,gBAAiB,EAAGC,UAAQ,GAC5ER,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMM,MAAM,cACJT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,MAAM,gBACPV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,KAAM,IACZX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,YAAf,qRAORZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,MAAM,QACPV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,KAAM,IACZX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,YAAf,+FAIRZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,MAAM,YACPV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,KAAM,IACRX,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAca,gBAAgB,EAAOC,MAzClD,CACX,CACEC,OAAQ,aACRC,MAAM,qBACNC,UAAW,cAEb,CACEC,SAAU,aACVD,UAAW,cAGb,CACEC,SAAU,aACVD,UAAW,oBAgCDlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,MAAM,gBACPV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,KAAM,IACZX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,kBAAf,sBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKU,UAAU,YAAf,+BACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKU,UAAU,kBAAf,kBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKU,UAAU,YAAf,wCA3DSQ,cCWtBC,mLAZX,OACIrB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,KAAM,IAAKX,EAAAC,EAAAC,cAAA,OAAKoB,IAAI,8BAA8BC,IAAI,iBAAiBC,OAAO,MAAMC,MAAM,MAAMC,MAAM,eAE5G1B,EAAAC,EAAAC,cAACyB,EAAD,cARQP,aCMEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93ab44d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ToolBar.css';\r\nimport { TabsContainer, Tabs, Tab, ListItem, MenuButton,\r\nGrid, Cell } from 'react-md';\r\nimport ImageGallery from 'react-image-gallery';\r\nimport 'react-image-gallery/styles/css/image-gallery.css';\r\nimport 'react-image-gallery/styles/scss//image-gallery.scss';\r\nimport 'react-image-gallery/styles/css/image-gallery-no-icon.css';\r\nimport 'react-image-gallery/styles/scss/image-gallery-no-icon.scss';\r\n\r\n\r\nexport default class ToolBar extends Component {\r\n  render() {\r\n    const images = [\r\n        {\r\n          srcSet: \"shelby.jpg\",\r\n          media:'(max-width: 500px)',\r\n          thumbnail: 'shelby.jpg',\r\n        },\r\n        {\r\n          original: 'shelby.jpg',\r\n          thumbnail: 'shelby.jpg'\r\n         \r\n        },\r\n        {\r\n          original: 'shelby.jpg',\r\n          thumbnail: 'shelby.jpg'\r\n    \r\n        }\r\n      ]\r\n\r\n    return (\r\n      <TabsContainer panelClassName=\"md-grid\" fixed colored defaultTabIndex={0} centered >\r\n            <Tabs tabId=\"simple-tab\">\r\n                    <Tab label=\"About Bertha\">\r\n                        <Grid>\r\n                            <Cell size={12}>\r\n                            <div className=\"thisText\">BERTHA IRT is a tool which Students, Parents, and Teachers can use to report an incident anonymously.\r\n                             Students join groups using an Access Code generated when an administrator creates a group.\r\n                              Administrators are given tools to manage reports and keep the sender updated.</div>\r\n                            </Cell>\r\n                            \r\n                        </Grid>\r\n                    </Tab>\r\n                    <Tab label=\"Demo\">\r\n                        <Grid>\r\n                            <Cell size={12}>\r\n                            <div className=\"thisText\">Bajjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjking Cakes and Cookies and creme and logic</div>\r\n                            </Cell>\r\n                        </Grid>\r\n                    </Tab>\r\n                    <Tab label=\"Pictures\">\r\n                        <Grid>\r\n                            <Cell size={12}>\r\n                                <ImageGallery showPlayButton={false} items={images}></ImageGallery>\r\n                            </Cell>\r\n                        </Grid>\r\n                    </Tab>\r\n                    <Tab label=\"Deliverables\" >\r\n                        <Grid>\r\n                            <Cell size={12}>\r\n                            <div className=\"thisHeaderText\">Git Repositories: </div>\r\n                            <br></br>\r\n                            <div className=\"thisText\">List of Git Repositories...</div>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <div className=\"thisHeaderText\">Documentation:</div>\r\n                            <br></br>\r\n                            <div className=\"thisText\">List of Documentation...</div>\r\n                            </Cell>\r\n\r\n                            \r\n                     \r\n                        </Grid>\r\n                    </Tab>\r\n            </Tabs>\r\n      </TabsContainer>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ToolBar from './ToolBar.js';\nimport { Grid, Cell} from 'react-md'; \n\nclass App extends Component {\n  render() {\n  \n\n    return (\n        <Grid>\n          <Cell size={12} ><img src='Berta-website-god-image.png' alt=\"universityOfAl\" height=\"125\" width=\"150\" class=\"fadeImage\"/></Cell>\n          <ToolBar></ToolBar>\n        </Grid>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}